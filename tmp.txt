this video,  I'm going to show you how to solve two of the biggest problems in AI-assisted development: the 'Amnesiac AI' that forgets your project's context, and the 'Cross-Platform Chaos' of managing rules across different tools. Hi, I'm Hi,  Boting,  An AI Engineer that aims to accelerate technological explosion. , and today we're diving into the Universal Rules Template for AI Coding Assistants.
We know it's frustrating when your AI partner can't remember key requirements, or when you have to spend valuable time re-configuring everything just to switch from your IDE to a command-line tool. Today, weâ€™ll walk through a framework that gives your AI a persistent 'brain' and lets you sync it everywhere with a single command. By the end, you'll have a powerful, consistent AI partner that deeply understands your project, no matter which tool you use.
Before we start, let's quickly cover the main idea. You have your project, which we'll call the Target Repo. And you have this template, the Source Repo. We'll use a Python script from the template to install and manage a 'brain' for your AI inside your project.
This 'brain' consists of three key parts: 'project_rules' defines your AI's personality and workflows, 'memory' holds all your project-specific context like requirements and architecture, and 'tools' contains shared scripts. Our script will keep this brain in sync with all your AI assistants.
First, you'll need to clone the Rulebook-AI template repository from GitHub to get the management script and the master rules.
Next, we'll set up a clean Python environment to run the script. We'll create a Conda environment, activate it, and install the necessary dependencies from the requirements file. This ensures the script has everything it needs to work correctly.
Now for the magic. From inside the rulebook-ai directory, let's run our first command. We'll start with install. This command copies the rules, memory starters, and tools into your project.
I'm targeting my project folder here. Watch the file explorer on the right when I hit enter."
[On the right, the project_rules/,memory/,tools/folders instantly appear inside 'my-cool-project'. Then, platform-specific folders like.cursor/,.clinerules/, and.github/also appear.]	"And just like that, the framework is installed! The script created the project_rules, memory, and tools directories, and, crucially, it automatically generated the specific rule files needed for Cursor, CLINE, GitHub Copilot, and other assistants.
So what did we just install? Let's look at the memory folder. This is your project's long-term memory. It contains templates for your Product Requirement Document, architecture, technical decisions, and more. This is how you solve the 'Amnesiac AI' problem.
By filling these files out, you can now ask your AI questions with deep context. For example, you can ask for the status of a specific task, and because the AI can reference the tasks_plan.md file, it can give you a precise answer instead of guessing.
Next, let's look at project_rules. These files define how your AI should behave. For instance, implement.md gives the AI a clear, step-by-step workflow for writing code, including testing.
Now, let's say I customize a rule.  How do I get all my different AI assistants to recognize this change? This is where we solve the 'Cross-Platform Chaos' problem.
You simply go back to your terminal and run the sync command. This one command reads your changes from project_rules and regenerates the native rule files for every single supported platform, like Cursor, CLINE, RooCode, and Github Copilot.
And we're actively working on expanding this support, so look for official integration with tools like OpenAI Codex, Gemini CLI, and Claude Code coming very soon. No more copy-pasting!
And that's it! You now have a framework with a central brain for your project's AI. You can give it deep context through the Memory Bank, define its behavior with the Rulebook, and with one sync command, ensure that personality is consistent everywhere. You've conquered both the Amnesiac AI and Cross-Platform Chaos.
So, what's your next step? To get started now, head over to the GitHub repository. The link is in the description below.
Give the repo a star if you find this useful, and don't hesitate to open an issue if you have ideas or questions. It's time to supercharge your AI coding workflow. Thanks for watching!